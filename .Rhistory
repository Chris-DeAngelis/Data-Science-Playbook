library(shiny) # Interactive Dashboard
library(tidyverse) # Data Tidying & Manipulation
#library(MonteCarlo)
library(rgl) # 3D Plotting
setwd("C:/Users/chris.deangelis/Elkay/Data Science - General/Proof of Concept/")
df <- read_csv("Systems_Analysis_Example.csv")
# Randomize df rows and columns IF RANDOMIZE == TRUE
set.seed(1523)
df <- df[sample(nrow(df)),]
df <- df[,sample(ncol(df))]
# Randomized matrix of variable sensitivity shocks
sensitivity_vector <- append(seq(0.05,0.3,0.05)+1,-seq(0.05,0.3,0.05)+1)
sensitivity_list <- list()
for(i in 1:dim(df)[2]){sensitivity_list[[i]] <- sample(sensitivity_vector)}
sensitivity_matrix <- do.call(cbind,sensitivity_list)# %>% as.data.frame()
temp_row <- data.frame()
temp <-data.frame()
for(x in 1:dim(df )[1]){
for(y in 1:nrow(sensitivity_matrix)){
temp_row <- df[x,]*sensitivity_matrix[y,]
temp <- rbind(temp, temp_row)
}
}
# Append new sensitivity testing rows and shuffle results
df <- rbind(df,temp)
df <- df[sample(nrow(df)),]
# Apply rules
df <- df %>%
mutate(Outcome=case_when(
Temperature<5 | Temperature>105 ~ "Fail",
Salinity<.001 | (Temperature>103 & Salinity >.11) ~ "Fail",
Corrosion>.11 ~ "Fail",
TRUE ~ "Pass"
)
)
# Plot results
# Add a new column with color
mycolors <- c('royalblue1', 'darkred')
df$Color<- mycolors[as.factor(df$Outcome)]
# Plot
plot3d(
x=scale(df$Temperature), y=scale(df$Salinity), z=scale(df$Humidity),
col = df$Color,
type = 'p',
radius = .8,
xlab="Temperature", ylab="Salinity", zlab="Humidity")
getwd()
getwd()()
list.files()
list.files("./Capabilities/")
list.files("./Capabilities/")
list.files("./Capabilities/Sourcing/")
list.files("./Capabilities/Sourcing/Database/")
library(keyring)
key_list()
key_list("Elkay")
key_get("Snowflake","DATASCIENCE_READONLY", "Elkay"))
key_get("Snowflake","DATASCIENCE_READONLY", "Elkay")
?key_list
key_list(keyring="Elkay")
?key_set
library(readxl)
library(DBI)
getwd()
df <- mtcars
# Build a pretty table and save it to a .PNG image (or PDF, HTML, etc)
df %>%
kbl(caption = "Table Title") %>%
kable_classic(full_width = F, html_font = "Cambria")
library(tidyverse)
require(Metrics)
require(swirl)
library(swirl)
require("swirl")
library(kableExtra)
library(magrittr) # Piping is the most effective way to simplify table build out and formatting
df <- mtcars
# Build a pretty table and save it to a .PNG image (or PDF, HTML, etc)
df %>%
kbl(caption = "Table Title") %>%
kable_classic(full_width = F, html_font = "Cambria")
?kableExtra
plot(pressure)
pressure
?plot
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
points(x, cex = .5, col = "dark red")
mtcars
ggplot(mtcars, aes(x = mpg, y = wt)) +
geom_point() +
geom_smooth() +
facet_wrap(. ~ cyl)
ggplot(mtcars, aes(x = mpg, y = wt)) +
geom_point() +
geom_smooth() +
facet_wrap(. ~ cyl) +
ggtitle("That's how you chart!")
ggplot(mtcars, aes(x = mpg, y = wt)) +
geom_point() +
geom_smooth() +
facet_wrap(. ~ cyl) +
ggtitle("That's how you chart!") +
theme_minimal()
library(rgl)
mycolors <- c('royalblue1', 'darkred')
df$Color<- mycolors[as.factor(df$Outcome)]
data <- mtcars
plot3d(
x=scale(data$mpg), y=scale(data$wt), z=scale(data$cyl),
col = "blue",
type = 'p',
radius = .8,
xlab="MPG", ylab="Weight", zlab="Cylinders")
plot3d(
x=scale(data$mpg), y=scale(data$wt), z=scale(data$cyl),
col = c("blue","green","red"),
type = 'p',
radius = .8,
xlab="MPG", ylab="Weight", zlab="Cylinders")
